// Задание 1: Простой промис
// Создайте промис, который через 3 секунды возвращает строку "Промис выполнен успешно!". Используйте then для вывода результата в консоль.

// Задание 2: Промис с ошибкой
// Создайте промис, который через 2 секунды отклоняется с ошибкой "Произошла ошибка". Обработайте ошибку с помощью catch и выведите сообщение в консоль.

// Задание 3: Успех или ошибка
// Напишите функцию, которая возвращает промис. Промис должен завершаться успешно с вероятностью 50% и отклоняться с ошибкой в оставшихся 50%. Используйте then и catch для обработки результата.

// Задание 4: Цепочка промисов
// Создайте цепочку промисов, где каждый следующий промис зависит от результата предыдущего. Например, первый промис возвращает число, второй умножает его на 2, третий добавляет 10 и т.д. Выведите конечный результат в консоль.

// Задание 5: Задержка выполнения
// Напишите функцию delay(ms), которая возвращает промис, переходящий в состояние выполненного через заданное количество миллисекунд. Используйте эту функцию для создания задержек между выполнением кода.

// Задание 6: Последовательное выполнение
// Используя функцию из задания 5, создайте цепочку промисов, которая выполняет три различных асинхронных задачи (например, выводит сообщения в консоль с задержкой). Все задачи должны выполняться последовательно.

// Задание 7: Параллельное выполнение
// Создайте три промиса, каждый из которых выполняется через разное количество времени (например, 1 секунда, 2 секунды, 3 секунды). Используйте Promise.all для запуска всех промисов параллельно и выведите результат в консоль, когда все промисы будут выполнены.

// Задание 8: Гонка промисов
// Используйте Promise.race, чтобы запустить несколько промисов, и выведите результат первого выполненного промиса в консоль.

// Задание 9: Промис с fetch
// Напишите функцию, которая использует fetch для загрузки данных с какого-либо публичного API. Функция должна возвращать промис. Используйте then для обработки успешного ответа и catch для обработки ошибок.

// Задание 10: Обработка ошибок в цепочке
// Создайте цепочку промисов, в которой одна из операций намеренно вызывает ошибку. Убедитесь, что ошибка правильно перехватывается и обрабатывается, а оставшиеся промисы не выполняются.